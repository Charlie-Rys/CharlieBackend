// <auto-generated />
using System;
using CharlieBackend.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CharlieBackend.Infrastructure.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251024072140_Book")]
    partial class Book
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("AspNetCoreHero.EntityFrameworkCore.AuditTrail.Models.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NewValues")
                        .HasColumnType("longtext");

                    b.Property<string>("OldValues")
                        .HasColumnType("longtext");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("longtext");

                    b.Property<string>("TableName")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("CharlieBackend.Domain.Entities.Catalog.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("CharlieBackend.Domain.Entities.Catalog.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .HasColumnType("longtext");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CharlieBackend.Domain.Entities.Library.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id")
                        .HasName("Unq_Authors_Id");

                    b.ToTable("mms_Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1903, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "George",
                            LastName = "Orwell"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "J.K.",
                            LastName = "Rowling"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1949, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Haruki",
                            LastName = "Murakami"
                        });
                });

            modelBuilder.Entity("CharlieBackend.Domain.Entities.Library.AuthorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Awards")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Biography")
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("SocialMediaHandle")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id")
                        .HasName("Unq_AuthorDetails_Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("mms_AuthorDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Awards = "Prometheus Hall of Fame Award",
                            Biography = "English novelist and essayist, journalist and critic.",
                            SocialMediaHandle = "@orwell_official",
                            Website = "https://georgeorwell.org"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Awards = "Hugo Award, British Book Award",
                            Biography = "British author, best known for the Harry Potter series.",
                            SocialMediaHandle = "@jk_rowling",
                            Website = "https://jkrowling.com"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            Awards = "Franz Kafka Prize",
                            Biography = "Japanese writer known for surreal and melancholic novels.",
                            SocialMediaHandle = "@murakami_haruki",
                            Website = "https://harukimurakami.com"
                        });
                });

            modelBuilder.Entity("CharlieBackend.Domain.Entities.Library.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id")
                        .HasName("Unq_Books_Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("mms_Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            ISBN = "9780451524935",
                            PublishDate = new DateTime(1949, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "1984"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            ISBN = "9780590353427",
                            PublishDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Harry Potter and the Sorcerer’s Stone"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            ISBN = "9780375704024",
                            PublishDate = new DateTime(1987, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Norwegian Wood"
                        });
                });

            modelBuilder.Entity("CharlieBackend.Domain.Entities.Library.BookDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Language")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id")
                        .HasName("Unq_BookDetails_Id");

                    b.HasIndex("BookId");

                    b.ToTable("mms_BookDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            Genre = "Dystopian",
                            Language = "English",
                            PageCount = 0,
                            Publisher = "Secker & Warburg"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            Genre = "Fantasy",
                            Language = "English",
                            PageCount = 0,
                            Publisher = "Bloomsbury"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            Genre = "Romance / Psychological Fiction",
                            Language = "Japanese",
                            PageCount = 0,
                            Publisher = "Kodansha"
                        });
                });

            modelBuilder.Entity("CharlieBackend.Domain.Entities.Catalog.Product", b =>
                {
                    b.HasOne("CharlieBackend.Domain.Entities.Catalog.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("CharlieBackend.Domain.Entities.Library.AuthorDetail", b =>
                {
                    b.HasOne("CharlieBackend.Domain.Entities.Library.Author", "Author")
                        .WithMany("AuthorDetails")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_AuthorDetails_Author")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("CharlieBackend.Domain.Entities.Library.Book", b =>
                {
                    b.HasOne("CharlieBackend.Domain.Entities.Library.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_Books_Author")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("CharlieBackend.Domain.Entities.Library.BookDetail", b =>
                {
                    b.HasOne("CharlieBackend.Domain.Entities.Library.Book", "Book")
                        .WithMany("BookDetails")
                        .HasForeignKey("BookId")
                        .HasConstraintName("fk_BookDetails_Book")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("CharlieBackend.Domain.Entities.Library.Author", b =>
                {
                    b.Navigation("AuthorDetails");

                    b.Navigation("Books");
                });

            modelBuilder.Entity("CharlieBackend.Domain.Entities.Library.Book", b =>
                {
                    b.Navigation("BookDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
